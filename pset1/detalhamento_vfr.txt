# IDENTIFICAÇÃO DO ESTUDANTE:
#
#    Nome completo: Vinícius Frigulha Ribeiro
#    Matrícula: 202201737
#    Turma: CC6N
#    Email: viniciusfrigulha@gmail.com
#

O PSet 1 foi aplicado no Visual Studio Code, usando Python 3.13.0 (versão mais atual na data em que foi baixado - 04/11/2024). Além disso, foi instalada a bibliote Pillow, que serviu para carregar e salvar as imagens.

Para a implementação dos métodos da classe Imagem, foi utilizado o arquivo 'pset1.py', que também serviu para criar e salvar as imagens das questões na pasta 'results_vini'.
Para execução dos testes unitários, foram utilizados os arquivos 'test.py' e as imagens das pastas 'test_images' e 'test_results'.

O PSet 1 foi executado por mim, Vinícius Frigulha Ribeiro, seguindo a ordem dos capítulos. Nenhum capítulo foi feito sem a completa resolução de seu antecessor.
Para verificar que os métodos implementados estavam corretos, foi criado um teste unitário específico para cada um dos testes solicitados no PSet, além de testes criados por mim.

A primeira coisa feita por mim foi corrigir o código para que os primeiros testes unitários funcionassem. Apenas após essa correção que os métodos da classe foram implementados. Todos os ajustes feitos estão identificados por '(V.F.R.)' que serve para identificar as modificações feitas por mim.

O primeiro método implementado foi o 'invertida', que tem o objetivo de inverter os pixels de uma imagem usando a lógica 'i = 255 - o', onde 'o' é o valor do pixel da imagem original e 'i' é o valor do pixel da imagem invertida. Após feito esse método, foram realizados os testes unitários da classe 'TestInvertida'.
Foi a partir desse método estar bem definido que a Questão 01 foi realizada, pois para inverter uma imagem 4x1 com pixels [29, 89, 136, 200] utilizando a fórmula chegamos ao resultado de [226, 166, 119, 55]. O mesmo foi feito para a Questão 02, que tinha o objetivo de salvar a imagem 'bluegill.png' após sua inversão.

Os próximos métodos implementados foram os 'ajusta_pixel' da 'correlacao'. O primeiro tem o objetivo de garantir que os pixels das imagens estejam no range [0, 255]. Caso algum valor seja menor que 0, ele assume o valor 0. Caso seja maior que 255, assume o valor 255. Já o segundo funciona como um filtro, usando um kernel como entrada para retornar a nova configuração da imagem. A partir de agora, estes dois métodos serão sempre chamados nos demais para garantir que os resultados estejam corretos, tanto para os testes unitários, quanto para gerar e salvar as imagens dos demais exercícios.
Para testar que estes métodos foram implementados corretamente, foi criada uma nova classe no arquivo 'test.py' chamada de 'TestKernel'. Nela foi usada a imagem 'centered_pixel.png', uma imagem 11x11 com todos os pixels iguais a 0, exceto o central que assume o valor 255, ou seja, um quadrado preto com um ponto branco no meio. Nessa classe, foram adicionadas as funções 'test_kernel_identidade', que tinha o objetivo de retornar a imagem original; 'test_kernel_translacao', que tinha o objetivo de deslocar o pixel escolhido para 2 pixels à direita; e, por último, o 'test_kernel_media', que cria uma região em torno do pixel central fazendo-o assumir a metade do valor do pixel escolhido. Todos os resultados esperado nessa classe foram feitos manualmente e todos eles funcionaram.
A Questão 03 gira em torno do mesmo assunto. Seus cálculos foram feitos no almaço. O resultado é 32,76, pois o objetivo era encontrar o valor sem arredondá-lo para um inteiro. Já na Questão 04, o objetivo era aplicar o método da 'correlacao' à imagem 'pigbird.png' e salvar o seu resultado. Também funcionou.

Os dois próximos métodos são 'retorna_kernel' e o 'borrada'. O primeiro retorna um kernel de 'blur' de dimensões n x n, aplicando desfoque uniformemente. Já o segundo é para aplicar o filtro de desfoque na imagem, deixando-a 'embaçada'. Como dito anteriormente, ela utiliza do método 'correçacao', mas aqui o kernel é sempre quadrado de dimensões n x n (vindo do método 'retorna_kernel').
Para validar se o método foi aplicado corretamente, foi utilizada a função 'test_borrada' da classe 'TestFiltros'. Todos os testes funcionaram. Após essa validação, foi realizado exercício de salvar a imagem 'cat.png' com esse efeito de blur para um kernel de tamanho 5 x 5.

O próximo método é o 'focada', que tem o objetivo de deixar uma imagem com maior nitidez. Ele foi implementado seguindo o cálculo 'Sx,y = round(2*Ix,y - Bx,y)', ou seja, o resultado é obtido pela subtração entre duas matrizes: a primeira é o dobro do kernel da imagem original (matriz com todos os elementos iguais a zero, exceto o central que é igual a 1), e a segunda é o kernel da imagem borrada. Então primeiro o método obtém a imagem borrada fazendo uma chamada no método 'borrada'. Depois, ele aplica para cada pixel da imagem o cálculo acima, retornando a imagem nítida.
Para validar que o método foi implementado corretamente, foi utilizada a função 'test_focada' da classe 'TestFiltros' do arquivo 'test.py'. Os testes foram executados com sucesso.
É com esse mesmo cálculo que a Questão 05 foi feita, encontrando o kernel da imagem nítida a partir de um kernel de desfoque 3x3.
Além disso, foi aplicado esse método na imagem 'python.png' para deixá-la nítida.

Por fim, foram implementados 3 métodos: 'bordas_x', 'bordas_y' e 'bordas'. Todos eles visam identificar as bordas de uma imagem. O primeiro detecta horizontalmente as bordas, já o segundo verticalmente. Ambos utilizam os kernels Kx e Ky do 'filtro de Sobel'. Ao se utilizar apenas um deles, apenas as bordas no sentido daquele kernel são detectados. Para obter as bordas por completo, se utiliza os dois combinados, pelo cálculo Ox,y = sqrt(Ox^2 + Oy^2), isto é, o kernel a ser usado é igual à raiz quadrada da soma dos quadrados dos kernels Kx e Ky. Com essa explicação acima, foi feita a Questão 06, que tem como objetivo explicar o funcionamento dos kernels citados e aplicar os 3 métodos na imagem 'constructor.png' para visualizar o resultado separadamente e em conjunto.
Para validar que o método foi implementado corretamente, foi utilizada a função 'test_bordas' da classe 'TestFiltros' do arquivo 'test.py'. Os testes foram executados com sucesso.

No arquivo 'pset1.py', na função 'main', é possível visualizar a geração das imagens conforme foi solicitado em cada questão e exercício.

PSet1 realizado por Vinícius Frigulha Ribeiro.
